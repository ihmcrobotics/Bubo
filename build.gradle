import java.text.SimpleDateFormat

// TODO insert analytics and adsense into javadoc

ext.libpath = file('./').absolutePath

project.ext.shouldActivateJMEIntegration = {
    rootProject.hasProperty("useJME") && rootProject.useJME.toLowerCase().equals("true")
}

apply plugin: 'maven-publish'

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'org.projectbubo'
    version = '1-SNAPSHOT'

    if(shouldActivateJMEIntegration()) {
        repositories {
            maven {
                url 'http://updates.jmonkeyengine.org/maven'
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'maven'
    apply plugin: 'signing'

    sourceCompatibility = 1.6

    repositories {
        mavenCentral()
        mavenLocal()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    sourceSets {
        main {
            java {
                srcDir 'src'
            }
            resources {
                srcDir 'resources/src'
            }
        }

        test {
            java {
                srcDir 'test'
                srcDir 'generate'
                srcDir 'benchmark'
            }
            resources {
                srcDir 'resources/test'
            }
        }
    }

    dependencies {
        ['ip','io','calibration','geo','recognition','feature','sfm','visualize','openkinect','WebcamCapture'].
                each { String a -> compile group: 'org.boofcv', name: a, version: '0.19' }

        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    jar {
        manifest { // the manifest of the default jar is of type OsgiManifest
            instruction 'Bundle-Vendor', 'Project BUBO'
            instruction 'Bundle-DocURL', 'http://projectbubo.org'
        }
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    // if Maven central isn't setup in gradle.properties skip all of this
    if (project.hasProperty('ossrhUsername')) {
        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'ProjectBUBO'
                        packaging 'pom'
                        // optionally artifactId can be defined here
                        description 'Project BUBO is a library for robotic localization and mapping'
                        url 'http://projectbubo.org'

                        scm {
                            connection 'scm:git:git@github.com:lessthanoptimal/Bubo.git'
                            developerConnection 'scm:git:git@github.com:lessthanoptimal/Bubo.git'
                            url 'https://github.com/lessthanoptimal/Bubo'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id 'pabeles'
                                name 'Peter Abeles'
                                email 'peter.abeles@gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

// list of projects for creating javadoc and jars
def mainProjects = [':apps', ':core', ':gui', ':io', ':integration:jme']

// Creates a directory with all the compiled jars and the dependencies for main
task createLibraryDirectory(dependsOn: mainProjects.collect { it + ":jar" } + mainProjects.collect {
    it + ":sourcesJar"
}) << {

    // dependencies for main and their own jars
    ext.list = files(mainProjects.collect { project(it).tasks.jar.archivePath })
    ext.listSource = files(mainProjects.collect { project(it).tasks.sourcesJar.archivePath })

    file('libraries').deleteDir()
    file('libraries').mkdir()


    copy {
        from ext.list
        from ext.listSource
        into 'libraries'

        rename { String fileName ->
            "BUBO-" + fileName
        }
    }
}

task oneJarBin(type: Jar, dependsOn: mainProjects.collect { it + ":compileJava" }) {
    baseName = 'ProjectBUBO'

    from files(mainProjects.collect { project(it).sourceSets.main.output })
}

task oneJarSrc(type: Jar) {
    baseName = 'ProjectBUBO-src'

    from files(mainProjects.collect { project(it).sourceSets.main.allSource })
}
task oneJar( dependsOn: [oneJarBin,oneJarSrc]) {

}

task alljavadoc(type: Javadoc) {
    // only include source code in src directory to avoid including 3rd party code which some projects do as a hack
    source = mainProjects.collect { project(it).fileTree('src').include('**/*.java') }
//    source = javadocProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(mainProjects.collect { project(it).sourceSets.main.compileClasspath })

    destinationDir = file("${buildDir}/docs/javadoc")
    configure(options) {
        docTitle = "ProjectBUBO JavaDoc ($project.version)"
        links = ['http://docs.oracle.com/javase/7/docs/api/',
                 'http://ejml.org/javadoc/',
                 'http://georegression.org/javadoc/',
                 'http://ddogleg.org/javadoc/']
//        header = file('misc/header.txt').text.replace("\n", "")
//        bottom = file('misc/bottom.txt').text.replace("\n", "")
    }
}

idea {
    project {
        jdkName = '1.6 (64bit)'
        languageLevel = '1.6'
    }
}

// Disable the creation of jars for distribution.  If you don't do this it will crash
[':validation',':integration'].each {String a ->
    project(a) {
        if( project.hasProperty('ossrhUsername') ) {
            signArchives.enabled = false
        }
        sourcesJar.enabled = false
        javadocJar.enabled = false
        jar.enabled = false
        uploadArchives.enabled = false
        install.enabled = false
    }
}

publishing {
    publications {
        publishBuboFatJar(MavenPublication) {
            groupId 'org.projectbubo'
            artifactId "ProjectBubo"
            version "${new SimpleDateFormat("yyMMdd", Locale.getDefault()).format(new Date())}"

            artifact oneJarBin

            artifact oneJarSrc {
                classifier "sources"
            }

            pom.withXml {
                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', "Apache License, Version 2.0")
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

                def depsNode = asNode().appendNode('dependencies')

//                group: 'org.boofcv', name: a, version: '0.19'

                ['ip','io','calibration','geo','recognition','feature','sfm','visualize','openkinect','WebcamCapture'].each { boofDep ->
                    def newDependencyNode = depsNode.appendNode('dependency')
                    newDependencyNode.appendNode('groupId', 'org.boofcv')
                    newDependencyNode.appendNode('artifactId', "${boofDep}")
                    newDependencyNode.appendNode('version', '0.19')
                    newDependencyNode.appendNode('scope', 'compile')
                }

                if(shouldActivateJMEIntegration())
                {
                    ['jme3-core', 'jme3-desktop', 'jme3-lwjgl'].each { jmeDep ->
                        def newDependencyNode = depsNode.appendNode('dependency')
                        newDependencyNode.appendNode('groupId', 'com.jme3')
                        newDependencyNode.appendNode('artifactId', "${jmeDep}")
                        newDependencyNode.appendNode('version', '3.1.0-SNAPSHOT')
                        newDependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
    }
}